// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: control_service.proto

package control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TGMockControl_ListMessages_FullMethodName = "/xopoww.tgmock.TGMockControl/ListMessages"
	TGMockControl_CreateUpdate_FullMethodName = "/xopoww.tgmock.TGMockControl/CreateUpdate"
)

// TGMockControlClient is the client API for TGMockControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TGMockControlClient interface {
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	CreateUpdate(ctx context.Context, in *CreateUpdateRequest, opts ...grpc.CallOption) (*CreateUpdateResponse, error)
}

type tGMockControlClient struct {
	cc grpc.ClientConnInterface
}

func NewTGMockControlClient(cc grpc.ClientConnInterface) TGMockControlClient {
	return &tGMockControlClient{cc}
}

func (c *tGMockControlClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, TGMockControl_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tGMockControlClient) CreateUpdate(ctx context.Context, in *CreateUpdateRequest, opts ...grpc.CallOption) (*CreateUpdateResponse, error) {
	out := new(CreateUpdateResponse)
	err := c.cc.Invoke(ctx, TGMockControl_CreateUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TGMockControlServer is the server API for TGMockControl service.
// All implementations must embed UnimplementedTGMockControlServer
// for forward compatibility
type TGMockControlServer interface {
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	CreateUpdate(context.Context, *CreateUpdateRequest) (*CreateUpdateResponse, error)
	mustEmbedUnimplementedTGMockControlServer()
}

// UnimplementedTGMockControlServer must be embedded to have forward compatible implementations.
type UnimplementedTGMockControlServer struct {
}

func (UnimplementedTGMockControlServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedTGMockControlServer) CreateUpdate(context.Context, *CreateUpdateRequest) (*CreateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdate not implemented")
}
func (UnimplementedTGMockControlServer) mustEmbedUnimplementedTGMockControlServer() {}

// UnsafeTGMockControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TGMockControlServer will
// result in compilation errors.
type UnsafeTGMockControlServer interface {
	mustEmbedUnimplementedTGMockControlServer()
}

func RegisterTGMockControlServer(s grpc.ServiceRegistrar, srv TGMockControlServer) {
	s.RegisterService(&TGMockControl_ServiceDesc, srv)
}

func _TGMockControl_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TGMockControlServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TGMockControl_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TGMockControlServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TGMockControl_CreateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TGMockControlServer).CreateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TGMockControl_CreateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TGMockControlServer).CreateUpdate(ctx, req.(*CreateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TGMockControl_ServiceDesc is the grpc.ServiceDesc for TGMockControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TGMockControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xopoww.tgmock.TGMockControl",
	HandlerType: (*TGMockControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMessages",
			Handler:    _TGMockControl_ListMessages_Handler,
		},
		{
			MethodName: "CreateUpdate",
			Handler:    _TGMockControl_CreateUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_service.proto",
}
